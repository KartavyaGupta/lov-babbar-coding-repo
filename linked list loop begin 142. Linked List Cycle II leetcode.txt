/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
    ListNode *slow=head;
    ListNode *fast=head;
    ListNode* myfinal=head;
    //cout << "_-------------------" << endl;
    if (head == NULL) {
      return NULL;
    }
    else if (head->next == NULL) {
      return NULL;
    }
    else if (head->next == head) {
      head->next = NULL;
      return head;
    }
    //cout << "already here" << endl;

    while (slow != NULL && fast!=NULL)
    {
        slow=slow->next;
        if(fast!=NULL )
        {
            if(fast->next!=NULL)
            {
                fast=fast->next->next;
            }
            else
            {
                return NULL;
            }
          
        }
        else
        {
            return NULL;
        }
        if(slow==fast)
        {
            while(myfinal!=fast)
            {
                myfinal=myfinal->next;
                fast=fast->next;
                
            }
            return myfinal;
        }
       
    }
    return NULL;
        
    }
};
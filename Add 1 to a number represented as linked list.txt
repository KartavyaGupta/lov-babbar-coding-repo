//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h> 
using namespace std; 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data; 
        node = node->next; 
    }  
    cout<<"\n";
} 


// } Driver Code Ends
//User function template for C++

/* 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution {
public:
  Node *reverselist(Node *head) {
    Node *prev = NULL;
    Node *curr = head;
    Node *ahead = head->next;
    if (head == NULL) {
      return NULL;
    } else if (head->next == NULL) {
      return head;
    }

    while (curr != NULL) {
      //cout << "going into the loop " << endl;
      curr->next = prev;

      prev = curr;
      curr = ahead;
      if (curr != NULL) {
        ahead = curr->next;
      }
    }

    return prev;
  }
  void printlist(Node *head) {
    Node *temp = head;
    while (temp != NULL) {
      cout << temp->data << endl;
      temp = temp->next;
    }
  }
  Node *addOne(Node *head) {
    int sum = 0, carry = 0, flag = 0;
    Node *temp = NULL;
    Node *prev = NULL;

    head = reverselist(head);

    temp = head;
    while (temp != NULL) {
      if (flag == 0) {
        sum = (temp->data) + carry + 1;
        flag = 1;
      } else {
        sum = (temp->data) + carry;
      }
      if (sum <= 9) {
        temp->data = sum;
        carry = 0;
        break;
      } else {
        carry = 1;
        temp->data = sum % 10;
      }
      prev = temp;
      temp = temp->next;
    }
    if (carry == 1) {
      temp = new Node(1);
      prev->next = temp;
    }
    head = reverselist(head);
    return head;
  }
};






//{ Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        
        Node* head = new Node( s[0]-'0' );
        Node* tail = head;
        for(int i=1; i<s.size(); i++)
        {
            tail->next = new Node( s[i]-'0' );
            tail = tail->next;
        }
        Solution ob;
        head = ob.addOne(head);
        printList(head); 
    }
    return 0; 
} 

// } Driver Code Ends